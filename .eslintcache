[{"/Users/rajeski/Documents/chat/src/index.js":"1","/Users/rajeski/Documents/chat/src/App.js":"2","/Users/rajeski/Documents/chat/src/reportWebVitals.js":"3"},{"size":500,"mtime":1608452592062,"results":"4","hashOfConfig":"5"},{"size":2855,"mtime":1608460839875,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1608452592062,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1a055rr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/rajeski/Documents/chat/src/index.js",[],["16","17"],"/Users/rajeski/Documents/chat/src/App.js",["18","19"],"import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  // var firebaseConfig = {\n    apiKey: \"AIzaSyB9NYQaxzqrn_wwxe7S7wT1NBuYVLE9KS8\",\n    authDomain: \"chat-cf69a.firebaseapp.com\",\n    databaseURL: \"https://chat-cf69a-default-rtdb.firebaseio.com/\",\n    projectId: \"chat-cf69a\",\n    storageBucket: \"chat-cf69a.appspot.com\",\n    messagingSenderId: \"812703598840\",\n    appId: \"1:812703598840:web:0000e72f9a652ca3ea530d\"\n  // };\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\nconst [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n    <h1>WELCOME</h1>\n      <signOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn /> }\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signinwithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signinwithGoogle}>Sign in with Google</button>\n      <p>Please do not violate community guidelines or you will BANNED!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom() {\n\n  const dummy = useRef()\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue, \n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid, \n      photoURL\n    });\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n\n  }\n\nreturn (<>\n  <main>\n\n    {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n    <span ref={dummy}></span>\n\n  </main>\n\n  <form onSubmit={sendMessage}>\n\n    <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n    <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n  </form>\n</>)\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n\n    </div>\n  )\n\n}\n\nexport default App;\n","/Users/rajeski/Documents/chat/src/reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":61,"column":10,"nodeType":"26","messageId":"27","endLine":61,"endColumn":17},{"ruleId":"28","severity":1,"message":"29","line":123,"column":7,"nodeType":"30","endLine":123,"endColumn":29},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'SignOut' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]